---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: logstash
  namespace: elastic
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      name: logstash
  template:
    metadata:
      labels:
        name: logstash
    spec:
      containers:
      - name: logstash
        image: docker.elastic.co/logstash/logstash:7.3.2
        env:
        - name: LS_JAVA_OPTS
          value: -Xmx256m -Xms256m
        args: [
          "--config.reload.automatic"
        ]
        volumeMounts:
        - name: config
          mountPath: /usr/share/logstash/pipeline
        - name: logstash-yml
          mountPath: /usr/share/logstash/config/logstash.yml
          readOnly: true
          subPath: logstash.yml
      volumes:
      - name: logstash-yml
        configMap:
          defaultMode: 0666
          name: logstash-yml
      - name: config
        configMap:
          name: logstash-config
          items:
          - key: logstash.conf
            path: logstash.conf
      restartPolicy: Always
      nodeSelector:
        kubernetes.io/hostname: "htz1"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-yml
  namespace: elastic
data:
  logstash.yml: |-
    http.host: "0.0.0.0"
    xpack.monitoring.elasticsearch.hosts: [ "http://elasticsearch:9200" ]
    xpack.monitoring.elasticsearch.username: elastic
    xpack.monitoring.elasticsearch.password: changeme
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: elastic
data:
  logstash.conf: |-
    input {
      beats {
        port => 5000
      }
      http {
        codec => line
        host => "0.0.0.0"
        port => "8080"
        tags => ["input-http"]
      }
      tcp {
        codec => line
        host => "0.0.0.0"
        port => "8088"
        tags => ["input-http"]
      }
      syslog {
        codec => line
        host => "0.0.0.0"
        port => "8888"
        tags => ["input-http"]
      }
    }

    filter {
      if "input-http" in [tags] {
        json {
          skip_on_invalid_json => true
          source => "message"
          target => "parsedJson"
          id => "%{[parsedJson][index]}"
          add_field => { "index" => "%{[parsedJson][index]}" }
          remove_field => [ "parsedJson" ]
        }
        if [index] == '%{[parsedJson][index]}' {
          mutate {
            update => { "index" => "http-%{+YYYY.MM}" }
          }
        }
      }
    }
    output {
      if "input-http" in [tags] {
        elasticsearch {
            hosts => "elasticsearch:9200"
            index => "%{index}"
        }
        # For debug - check what metadata is in data
        # stdout {
        #   codec  => rubydebug {
        #     metadata => true
        #   }
        # }
      } else {
          elasticsearch {
            hosts => "elasticsearch:9200"
            index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
          }
      }
    }
