---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: logstash
  namespace: elastic
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        name: logstash
    spec:
      containers:
      - name: logstash
        image: logstash:7.2.0
        env:
        - name: LS_JAVA_OPTS
          value: -Xmx256m -Xms256m
        volumeMounts:
        - mountPath: /usr/share/logstash/pipeline
          name: config
      restartPolicy: Always
      volumes:
      - name: config
        configMap:
          name: logstash-config
          items:
          - key: logstash.conf
            path: logstash.conf
---
apiVersion: v1
kind: Service
metadata:
  name: logstash
  namespace: elastic
  labels:
    name: logstash
spec:
  ports:
    - port: 5000
      targetPort: 5000
  selector:
    name: logstash
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: elastic
data:
  logstash.conf: |-
    input {
      beats {
        port => 5000
      }
    }
    # filter {
    #   if [type] == "kube-logs" {
    #     mutate {
    #       rename => ["log", "message"]
    #     }
    #     date {
    #       match => ["time", "ISO8601"]
    #       remove_field => ["time"]
    #     }
    #     grok {
    #       match => { "source" => "/var/log/containers/%{DATA:pod_name}_%{DATA:namespace}_%{GREEDYDATA:container_name}-%{DATA:container_id}.log" }
    #       remove_field => ["source"]
    #     }
    #   }
    # }
    filter {
      if [event][module] == "haproxy" {
         grok {
            match => {
               "message" => [
                  "%{HAPROXY_DATE:[haproxy][request_date]} %{IPORHOST:[haproxy][source]} %{PROG:[process][name]}(?:\[%{POSINT:[process][pid]:long}\])?: %{GREEDYDATA} %{IPORHOST:[source][address]}:%{POSINT:[source][port]:long} %{WORD} %{IPORHOST:[destination][ip]}:%{POSINT:[destination][port]:long} \(%{WORD:[haproxy][frontend_name]}/%{WORD:[haproxy][mode]}\)",
                  "(%{NOTSPACE:[process][name]}\[%{NUMBER:[process][pid]:long}\]: )?%{IP:[source][address]}:%{NUMBER:[source][port]:long} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][http][request][time_wait_ms]:long}/%{NUMBER:[haproxy][total_waiting_time_ms]:long}/%{NUMBER:[haproxy][connection_wait_time_ms]:long}/%{NUMBER:[haproxy][http][request][time_wait_without_data_ms]:long}/%{NUMBER:[temp][duration]:long} %{NUMBER:[http][response][status_code]:long} %{NUMBER:[haproxy][bytes_read]:long} %{NOTSPACE:[haproxy][http][request][captured_cookie]} %{NOTSPACE:[haproxy][http][response][captured_cookie]} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active]:long}/%{NUMBER:[haproxy][connections][frontend]:long}/%{NUMBER:[haproxy][connections][backend]:long}/%{NUMBER:[haproxy][connections][server]:long}/%{NUMBER:[haproxy][connections][retries]:long} %{NUMBER:[haproxy][server_queue]:long}/%{NUMBER:[haproxy][backend_queue]:long} (\{%{DATA:[haproxy][http][request][captured_headers]}\} \{%{DATA:[haproxy][http][response][captured_headers]}\} |\{%{DATA}\} )?\"%{GREEDYDATA:[haproxy][http][request][raw_request_line]}\"",
                  "(%{NOTSPACE:[process][name]}\[%{NUMBER:[process][pid]:long}\]: )?%{IP:[source][address]}:%{NUMBER:[source][port]:long} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]}/%{NOTSPACE:[haproxy][bind_name]} %{GREEDYDATA:[haproxy][error_message]}",
                  "%{HAPROXY_DATE} %{IPORHOST:[haproxy][source]} (%{NOTSPACE:[process][name]}\[%{NUMBER:[process][pid]:long}\]: )?%{IP:[source][address]}:%{NUMBER:[source][port]:long} \[%{NOTSPACE:[haproxy][request_date]}\] %{NOTSPACE:[haproxy][frontend_name]} %{NOTSPACE:[haproxy][backend_name]}/%{NOTSPACE:[haproxy][server_name]} %{NUMBER:[haproxy][total_waiting_time_ms]:long}/%{NUMBER:[haproxy][connection_wait_time_ms]:long}/%{NUMBER:[temp][duration]:long} %{NUMBER:[haproxy][bytes_read]:long} %{NOTSPACE:[haproxy][termination_state]} %{NUMBER:[haproxy][connections][active]:long}/%{NUMBER:[haproxy][connections][frontend]:long}/%{NUMBER:[haproxy][connections][backend]:long}/%{NUMBER:[haproxy][connections][server]:long}/%{NUMBER:[haproxy][connections][retries]:long} %{NUMBER:[haproxy][server_queue]:long}/%{NUMBER:[haproxy][backend_queue]:long}"
               ]
            }
            pattern_definitions => {
               "HAPROXY_DATE" => "(%{MONTHDAY}[/-]%{MONTH}[/-]%{YEAR}:%{HOUR}:%{MINUTE}:%{SECOND})|%{SYSLOGTIMESTAMP}"
            }
         }
         date {
            match => [
               "[haproxy][request_date]",
               "dd/MMM/yyyy:HH:mm:ss][SSS]",
               "MMM dd HH:mm:ss"
            ]
            target => "@timestamp"
         }
         grok {
            match => {
               "source.address" => "^%{IP:[source][ip]}$"
            }
         }
         geoip {
            source => "[source][ip]"
            target => "[source][geo]"
         }
      }
    }

    output {
      elasticsearch {
        hosts => "elasticsearch:9200"
        index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
        # document_type => "%{[@metadata][type]}"
      }
    }
