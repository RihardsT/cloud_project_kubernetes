---
apiVersion: v1
kind: ConfigMap
metadata:
  name: elasticsearch-config
  namespace: elastic
  labels:
    k8s-app: elasticsearch
data:
  elasticsearch.yml: |-
    node.name: "elasticsearch-master1"
    cluster.name: "test-cluster"
    network.host: 0.0.0.0
    node.roles: [master, data, ingest, transform, ml, remote_cluster_client]
    cluster.initial_master_nodes:
      - elasticsearch-master1
    xpack.monitoring.collection.enabled: true # use metricbeat instead
    xpack.license.self_generated.type: trial
    xpack.security.enabled: true

    xpack.security.transport.ssl.enabled: true
    xpack.security.transport.ssl.keystore.path: "/usr/share/elasticsearch/config/http.p12"
    # xpack.security.transport.ssl.certificate: /usr/share/elasticsearch/config/ssl/mon2.rudenspavasaris.id.lv.cert
    # xpack.security.transport.ssl.key: /usr/share/elasticsearch/config/ssl/mon2.rudenspavasaris.id.lv.key

    xpack.security.http.ssl.enabled: true
    xpack.security.http.ssl.keystore.path: "/usr/share/elasticsearch/config/http.p12"
    # xpack.security.http.ssl.certificate: /usr/share/elasticsearch/config/ssl/mon2.rudenspavasaris.id.lv.cert
    # xpack.security.http.ssl.key: /usr/share/elasticsearch/config/ssl/mon2.rudenspavasaris.id.lv.key

    xpack.security.authc.api_key.enabled: true
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch
  namespace: elastic
spec:
  selector:
    matchLabels:
      name: elasticsearch
  replicas: 1
  template:
    metadata:
      labels:
        name: elasticsearch
    spec:
      # securityContext:
      #   sysctls:
      #   - name: vm.max_map_count
      #     value: "262144"
      initContainers:
      - name: increase-vm-max-map
        image: busybox
        command: ["sysctl", "-w", "vm.max_map_count=262144"]
        securityContext:
          privileged: true
      containers:
      - name: elasticsearch-master1
        image: docker.elastic.co/elasticsearch/elasticsearch:8.15.2
        env:
        - name: ES_JAVA_OPTS
          value: -Xmx1024m -Xms1024m
        # - name: discovery.type
        #   value: single-node
        - name: ELASTICSEARCH_USERNAME
          value: elastic
        - name: ELASTIC_PASSWORD
          value: changeme
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: elasticsearch-data
          # name: elasticsearch-volume
        - name: config
          mountPath: /usr/share/elasticsearch/config/elasticsearch.yml
          readOnly: true
          subPath: elasticsearch.yml
        - name: http-cert
          mountPath: /usr/share/elasticsearch/config/http.p12
          readOnly: true
          subPath: http.p12
        - name: http-cert
          mountPath: /usr/share/elasticsearch/config/ca.p12
          readOnly: true
          subPath: ca.p12
        - name: service-tokens
          mountPath: /usr/share/elasticsearch/config/service_tokens
          readOnly: true
          subPath: service-tokens
        - name: certificates
          mountPath: /usr/share/elasticsearch/config/ssl
          readOnly: true
      volumes:
        ##### Requires setting permissions on host, for this to work
        ### chmod 775 or chown 1000 (the elastic user in the container):
      - name: elasticsearch-data
        # hostPath:
        #   path: "/data/elasticsearch_data"
        emptyDir:
          sizeLimit: 500Mi
      - name: config
        configMap:
          defaultMode: 0777
          name: elasticsearch-config
      # - name: elasticsearch-volume
      #   persistentVolumeClaim:
      #     claimName: elastic-pvc
      - name: http-cert
        secret:
          secretName: http-cert
      - name: service-tokens
        secret:
          secretName: service-tokens
      - name: certificates
        hostPath:
          path: /certs
      restartPolicy: Always
      # nodeSelector:
      #   kubernetes.io/hostname: "htz1"
---
apiVersion: v1
kind: Service
metadata:
  name: elasticsearch
  namespace: elastic
  labels:
    name: elasticsearch
spec:
  ports:
    - name: https
      port: 9200
      targetPort: 9200
      protocol: TCP
    - name: cluster-comms
      port: 9300
      targetPort: 9300
      protocol: TCP
  selector:
    name: elasticsearch
### With the HTTP certs internally, Traefik gives Bad Gateway Internal server error.
# Need to investigate, if Traefik can load custom CA cert so it works internally
# Doesn't seem like that would work, as it looks like Traefik uses service IP directly,
# instead of service name, so the cert would need to be generated for IP's too.
---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: elasticsearch
  namespace: elastic
spec:
  entryPoints:
    - https
  routes:
  - match: Host(`mon2.rudenspavasaris.id.lv`)
    kind: Rule
    services:
    - name: elasticsearch
      port: 9200
      scheme: https
  tls:
    certResolver: default
##### Don't yet understand how this ServersTransport can be utilized for routes
# ---
# apiVersion: traefik.io/v1alpha1
# kind: ServersTransport
# metadata:
#   name: elasticsearch
#   namespace: elastic
# spec:
#   insecureSkipVerify: true

# ---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: elastic-pv
#   namespace: elastic
# spec:
#   capacity:
#     storage: 1Gi
#   accessModes:
#   - ReadWriteOnce
#   volumeMode: Filesystem
#   storageClassName: local-storage
#   persistentVolumeReclaimPolicy: Delete
#   local:
#     path: /data/elasticsearch_data
#   nodeAffinity:
#     required:
#       nodeSelectorTerms:
#       - matchExpressions:
#         - key: kubernetes.io/hostname
#           operator: In
#           values:
#           - htz1
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: elastic-pvc
#   namespace: elastic
# spec:
#   accessModes:
#   - ReadWriteOnce
#   volumeMode: Filesystem
#   storageClassName: local-storage
#   resources:
#     requests:
#       storage: 1Gi
